<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Nearest Neighbour Information</title>
  <style>
    #plot {{
      width: 800px;
      height: 800px;
    }}
    
    tr.hidden {{
      display: none;
    }}
    /* for image grid display*/
    .grid-container {{
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            grid-auto-rows: 100px;
            gap: 5px;
            /* max-width: 500px; Fixed size for grid */
            width: 100%;
            max-height: 700px;
            overflow: auto;
            margin: 50px;
            background-color: gray;
            
        }}
        .grid-item {{
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }}
        .grid-item img {{
            width: 100%;
            height: 100%;
            object-fit: contain; /* Maintain aspect ratio */
        }}

        .grid-item-large img {{
            max-width: 700px;
            max-height: 700px;
            object-fit: contain;
        }}
  </style>
</head>
<body>
    <h1>Nearest Neighbour Image Visualisation</h1>
    <p>You can âŒ˜+F/Ctrl+F and type <code>(desired index)</code> to find a specific index,
        or you can type <code>[desired cluster]</code> to view all photos of a given cluster (and the number of elements in the cluster).
        </p>
        <p>Images are ranked on their number of times they appear as a nearest neighbour. </p>
        <p>There are a total of 20 clusters (starting from 0). 
        The 10 nearest neighbours were found and used for calculating the nearest neighbour occurrences.</p>
        <p>You can select a group of points on the force directed diagram to show only those points, double click in the selection to clear it.</p>
         <p>You may also single click on a point to display it. It should be noted that when a selection tool is used a double click is required for this.</p>

    <h2>Components:</h2>
    <ol>
        <li>
            <strong>Force Directed Diagram</strong>
            <ul>
                <li>A visualisation based off of embedding distances and K nearest neighbours.</li>
                <li>Includes a KDE plot to aid in visualising density.</li>
                <li>Points can be hovered over to display their image index.</li>
                <li>Different point colours represent different clusters.</li>
                <li><strong>Groups of points can be selected (or single points can be clicked) to be displayed on the grid, and to filter the image table.</strong></li>
            </ul>
        </li>
        <li>
            <strong>Image Grid</strong>
            <ul>
                <li>Displays the last selected images.</li>
                <li>Can scroll to view all images when many are selected.</li>
            </ul>
        </li>
        <li>
            <strong>Image Table</strong>
            <ul>
                <li>Display ranking in list of reverse nearest neighbours, and index and cluster displayed in a way that can be searched as described above </li>
                <li>Number of reverse nearest neighbours and percentage fill for easy visualisation.</li>
                <li>Mean distance to all nearest neighbours and percentage fill for easy visualisation.</li>
                <li>Image filename.</li>
                <li>List of K nearest neighbours with clickable links.</li>
                <li>Thumbnail of image.</li>
            </ul>
        </li>
    </ol>

    <h2>Options:</h2>
    <ul>
        <li>Search for image indices/clusters as described above.</li>
        <li>Compare this document's look with different embeddings.</li>
        <li>Compare this document's look with different amounts of nearest neighbours + clusters.</li>
        <li>
            <strong>Group by Cluster</strong>
            <ul>
                <li>Size of cluster (<code>asc</code>/<code>desc</code>)</li>
                <li>Highest rank in cluster.</li>
            </ul>
        </li>
        <li><strong>Encode data into HTML document</strong> (increases size but allows it to be used standalone).</li>
    </ul>
    <hr />
    <div style="display: flex;">
    <div id="plot"></div>
    <div id="imageGrid" class="grid-container">Select images to have them appear here.</div>
    </div>

    <table border="1" style="width:100%;" id="data-table">
        <thead>
            <tr>
                <th>Rank (Index) [Cluster]</th>
                <th>Nearest Neighbour occurrences <br/> (excluding self)</th>
                <th>Mean Neighbour Distance</th>
                <th>Filename</th>
                <th>{number_of_neighbours} Nearest Neighbours (indices)</th>
                <th>Image</th>
            </tr>
        </thead>
        <tbody>
            {table_rows}
        </tbody>
    </table>

    <footer>
        <p>The University of Queensland Centre for Digital Cultures & Societies Summer Research 2025</p>
    </footer>
<script>
    const data = {data_json}
    const imagePath = "{image_path}";

    {plotly_data}

    // setup images from data list
    const rows = document.querySelectorAll('#data-table tbody tr');
    
    rows.forEach(row => {{
        const rowIndex = parseInt(row.getAttribute('id'));
        const imageId = `image_${{rowIndex}}`;
    
    // Find the image by its ID inside the row
    const imageElement = row.querySelector(`#${{imageId}}`);

    imageElement.src = imagePath + data.image_filenames[rowIndex]

    }});

    // setup chart 
    const contourTrace = {{
        z: data.Z,
        x: data.grid,
        y: data.grid,
        colorscale: [[0.0, 'rgb(0,0,4)'], [0.1111111111111111, 'rgb(27,12,65)'], [0.2222222222222222, 'rgb(74,12,107)'], [0.3333333333333333, 'rgb(120,28,109)'], [0.4444444444444444, 'rgb(165,44,96)'], [0.5555555555555556, 'rgb(207,68,70)'], [0.6666666666666666, 'rgb(237,105,37)'], [0.7777777777777777, 'rgb(251,155,6)'], [0.8888888888888888, 'rgb(247,209,61)'], [1.0, 'rgb(252,255,164)']], // the Inferno colorscale (not avaliable for plotly js but a personal favourite) 
        type: 'contour',
        colorbar: {{ title: 'Density' }},
        contours: {{
            showlabels: true,
            labelfont: {{ size: 12 }},
            coloring: 'heatmap',
        }}
    }};

    const scatterTrace = {{
        x: data.x,
        y: data.y,
        mode: 'markers',
        type: 'scattergl',
        hoverinfo: 'text',
        text: data.index.map(i => `Index: ${{i}}`),
        marker: {{
            symbol: 'circle',
            opacity: 0.5,
            color: data.rgba_colours,
            size: 4,
            line: {{ width: 1 }}
        }}
    }};

    const layout = {{
        title: "Spring Visualization for Image Embeddings Based Off Nearest Neighbor Distance",
        xaxis: {{ ticks: '', showgrid: false, zeroline: false, nticks: 20 }},
        yaxis: {{ ticks: '', showgrid: false, zeroline: false, nticks: 20 }},
        hovermode: 'closest',
        autosize: false,
        height: 800,
        width: 800,
    }};

    const fig = {{
        data: [contourTrace, scatterTrace],
        layout: layout
    }};

    Plotly.newPlot('plot', fig).then(function(gd) {{
        const plotDiv = document.getElementById('plot');
        const scatterData = gd.data[1];

        plotDiv.on('plotly_click', function(eventData) {{
            console.log("Clicked:", eventData); // Something can be done with this callback at somepoint
            const selectedIndex = eventData.points.map(point => {{
                const selectedX = point.x;
                const selectedY = point.y;

                let matchingIndex = -1;

                for (let i = 0; i < data.x.length; i++) {{
                    if (data.x[i] === selectedX && data.y[i] === selectedY) {{
                        matchingIndex = i;
                        break;
                    }}
                }}

                return matchingIndex
            }})

            const selectedIndexData = selectedIndex !== -1 ? data.index[selectedIndex] : null

            console.log("INDEX: ",selectedIndexData)
            // only update grid displayt

            const grid = document.getElementById('imageGrid');
            grid.innerHTML = ""

            const filename = data.image_filenames[selectedIndexData];

            let div = document.createElement("div");
            div.classList.add("grid-item-large");

            let img = document.createElement("img");
            img.src = imagePath + filename;
            img.alt = filename;

            div.appendChild(img);
            grid.appendChild(div);


            
        }});
        
        plotDiv.on('plotly_selected', function(eventData) {{
            console.log("Selected points:", eventData);
            // get index of points
            const selectedIndices = eventData.points.map(point => {{
                const selectedX = point.x;
                const selectedY = point.y;

                let matchingIndex = -1;

                for (let i = 0; i < data.x.length; i++) {{
                    if (data.x[i] === selectedX && data.y[i] === selectedY) {{
                        matchingIndex = i;
                        break;
                    }}
                }}

                return matchingIndex;
            }});
            // get master index 
            const selectedIndicesData = selectedIndices.map(index => {{
                if (index !== -1) {{
                    return data.index[index];
                }} else {{
                    return null;
                }}
            }});

            console.log("Selected indices:", selectedIndicesData);

            // Filter rows 
            const rows = document.querySelectorAll('#data-table tbody tr');
        
            rows.forEach(row => {{
                const rowIndex = parseInt(row.getAttribute('id'));
                // If no points are selected show all rows (for deselect)
                if (selectedIndicesData.includes(rowIndex) || selectedIndicesData.length === 0) {{
                    row.classList.remove('hidden');
                }} else {{
                    row.classList.add('hidden');
                }}
            }});

            // Update grid display
            const grid = document.getElementById('imageGrid');
            grid.innerHTML = ""

            // Add image for each selected index
            selectedIndicesData.forEach(index => {{
                const filename = data.image_filenames[index];

                let div = document.createElement("div");
                div.classList.add("grid-item");

                let img = document.createElement("img");
                img.src = imagePath + filename;
                img.alt = filename;

                div.appendChild(img);
                grid.appendChild(div);
            }})

        }});
    }});
</script>
</body>
</html>
